{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","status","query","handleChange","event","target","name","value","setState","this","props","todos","onSelect","selectedUserId","completedTodos","filter","todo","title","includes","completed","className","type","onChange","map","id","userId","key","classNames","readOnly","onClick","React","Component","API_URL","getUser","fetch","then","response","ok","Error","statusText","json","CurrentUser","user","data","prevProps","email","phone","onClear","App","clearUser","selectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7129a157.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    status: '',\n    query: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, onSelect, selectedUserId } = this.props;\n\n    const includesTodo = todos.filter(\n      todo => todo.title && todo.title.includes(this.state.query),\n    );\n\n    const completedTodos = includesTodo.filter(\n      ({ completed }) => {\n        switch (this.state.status) {\n          case 'active':\n            return !completed;\n          case 'completed':\n            return completed;\n          default:\n            return true;\n        }\n      },\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label>\n          Search by title names\n          <input\n            name=\"query\"\n            type=\"text\"\n            value={this.state.query}\n            onChange={this.handleChange}\n          />\n        </label>\n        <select\n          name=\"status\"\n          value={this.state.status}\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {completedTodos.map(({ id, title, userId, completed }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': completed,\n                  'TodoList__item--unchecked': !completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected':\n                      userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelect(userId)}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = () => (\n  fetch(`${API_URL}/todos/`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n);\n\nexport const getUser = id => (\n  fetch(`${API_URL}/users/${id}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n);\n","// import { render } from 'node-sass';\nimport React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(({ data: user }) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then(({ data: user }) => {\n          this.setState({ user });\n        });\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {phone}\n        </p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button\"\n          onClick={this.props.onClear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(({ data }) => this.setState({ todos: [...data] }));\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onSelect={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}